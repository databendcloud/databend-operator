/*
Copyright 2024.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/api/core/v1"
)

// S3StorageApplyConfiguration represents a declarative configuration of the S3Storage type for use
// with apply.
type S3StorageApplyConfiguration struct {
	S3AuthApplyConfiguration `json:",inline"`
	AllowInsecure            *bool   `json:"allowInsecure,omitempty"`
	RootPath                 *string `json:"rootPath,omitempty"`
	BucketName               *string `json:"bucketName,omitempty"`
	Region                   *string `json:"region,omitempty"`
	Endpoint                 *string `json:"endpoint,omitempty"`
}

// S3StorageApplyConfiguration constructs a declarative configuration of the S3Storage type for use with
// apply.
func S3Storage() *S3StorageApplyConfiguration {
	return &S3StorageApplyConfiguration{}
}

// WithSecretKey sets the SecretKey field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SecretKey field is set to the value of the last call.
func (b *S3StorageApplyConfiguration) WithSecretKey(value string) *S3StorageApplyConfiguration {
	b.SecretKey = &value
	return b
}

// WithAccessKey sets the AccessKey field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AccessKey field is set to the value of the last call.
func (b *S3StorageApplyConfiguration) WithAccessKey(value string) *S3StorageApplyConfiguration {
	b.AccessKey = &value
	return b
}

// WithSecretRef sets the SecretRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SecretRef field is set to the value of the last call.
func (b *S3StorageApplyConfiguration) WithSecretRef(value v1.ObjectReference) *S3StorageApplyConfiguration {
	b.SecretRef = &value
	return b
}

// WithAllowInsecure sets the AllowInsecure field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AllowInsecure field is set to the value of the last call.
func (b *S3StorageApplyConfiguration) WithAllowInsecure(value bool) *S3StorageApplyConfiguration {
	b.AllowInsecure = &value
	return b
}

// WithRootPath sets the RootPath field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RootPath field is set to the value of the last call.
func (b *S3StorageApplyConfiguration) WithRootPath(value string) *S3StorageApplyConfiguration {
	b.RootPath = &value
	return b
}

// WithBucketName sets the BucketName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BucketName field is set to the value of the last call.
func (b *S3StorageApplyConfiguration) WithBucketName(value string) *S3StorageApplyConfiguration {
	b.BucketName = &value
	return b
}

// WithRegion sets the Region field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Region field is set to the value of the last call.
func (b *S3StorageApplyConfiguration) WithRegion(value string) *S3StorageApplyConfiguration {
	b.Region = &value
	return b
}

// WithEndpoint sets the Endpoint field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Endpoint field is set to the value of the last call.
func (b *S3StorageApplyConfiguration) WithEndpoint(value string) *S3StorageApplyConfiguration {
	b.Endpoint = &value
	return b
}
