/*
Copyright 2024.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/api/core/v1"
)

// MetaConfigApplyConfiguration represents a declarative configuration of the MetaConfig type for use
// with apply.
type MetaConfigApplyConfiguration struct {
	MetaAuthApplyConfiguration `json:",inline"`
	Endpoints                  []string `json:"endpoints,omitempty"`
	TimeoutInSeconds           *int     `json:"timeoutInSecond,omitempty"`
	AutoSyncInterval           *int     `json:"autoSyncInterval,omitempty"`
}

// MetaConfigApplyConfiguration constructs a declarative configuration of the MetaConfig type for use with
// apply.
func MetaConfig() *MetaConfigApplyConfiguration {
	return &MetaConfigApplyConfiguration{}
}

// WithUser sets the User field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the User field is set to the value of the last call.
func (b *MetaConfigApplyConfiguration) WithUser(value string) *MetaConfigApplyConfiguration {
	b.User = &value
	return b
}

// WithPassword sets the Password field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Password field is set to the value of the last call.
func (b *MetaConfigApplyConfiguration) WithPassword(value string) *MetaConfigApplyConfiguration {
	b.Password = &value
	return b
}

// WithPasswordSecretRef sets the PasswordSecretRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PasswordSecretRef field is set to the value of the last call.
func (b *MetaConfigApplyConfiguration) WithPasswordSecretRef(value v1.ObjectReference) *MetaConfigApplyConfiguration {
	b.PasswordSecretRef = &value
	return b
}

// WithEndpoints adds the given value to the Endpoints field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Endpoints field.
func (b *MetaConfigApplyConfiguration) WithEndpoints(values ...string) *MetaConfigApplyConfiguration {
	for i := range values {
		b.Endpoints = append(b.Endpoints, values[i])
	}
	return b
}

// WithTimeoutInSeconds sets the TimeoutInSeconds field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TimeoutInSeconds field is set to the value of the last call.
func (b *MetaConfigApplyConfiguration) WithTimeoutInSeconds(value int) *MetaConfigApplyConfiguration {
	b.TimeoutInSeconds = &value
	return b
}

// WithAutoSyncInterval sets the AutoSyncInterval field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AutoSyncInterval field is set to the value of the last call.
func (b *MetaConfigApplyConfiguration) WithAutoSyncInterval(value int) *MetaConfigApplyConfiguration {
	b.AutoSyncInterval = &value
	return b
}
