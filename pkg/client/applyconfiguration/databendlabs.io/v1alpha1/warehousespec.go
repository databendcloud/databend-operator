/*
Copyright 2024.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/api/core/v1"
)

// WarehouseSpecApplyConfiguration represents a declarative configuration of the WarehouseSpec type for use
// with apply.
type WarehouseSpecApplyConfiguration struct {
	Replicas             *int                                    `json:"replicas,omitempty"`
	AutoSuspendAfterSecs *int                                    `json:"autoSuspendAfterSecs,omitempty"`
	QueryImage           *string                                 `json:"queryImage,omitempty"`
	Tenant               *v1.LocalObjectReference                `json:"tenant,omitempty"`
	Cache                *DiskCacheSpecApplyConfiguration        `json:"diskCacheSize,omitempty"`
	Log                  *LogSpecApplyConfiguration              `json:"log,omitempty"`
	PodLabels            map[string]string                       `json:"labels,omitempty"`
	PodResource          *v1.ResourceRequirements                `json:"resourcesPerNode,omitempty"`
	PodTolerations       []v1.Toleration                         `json:"tolerations,omitempty"`
	NodeSelector         map[string]string                       `json:"nodeSelector,omitempty"`
	Service              *WarehouseServiceSpecApplyConfiguration `json:"service,omitempty"`
	Ingress              *WarehouseIngressSpecApplyConfiguration `json:"ingress,omitempty"`
	Settings             map[string]string                       `json:"settings,omitempty"`
}

// WarehouseSpecApplyConfiguration constructs a declarative configuration of the WarehouseSpec type for use with
// apply.
func WarehouseSpec() *WarehouseSpecApplyConfiguration {
	return &WarehouseSpecApplyConfiguration{}
}

// WithReplicas sets the Replicas field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Replicas field is set to the value of the last call.
func (b *WarehouseSpecApplyConfiguration) WithReplicas(value int) *WarehouseSpecApplyConfiguration {
	b.Replicas = &value
	return b
}

// WithAutoSuspendAfterSecs sets the AutoSuspendAfterSecs field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AutoSuspendAfterSecs field is set to the value of the last call.
func (b *WarehouseSpecApplyConfiguration) WithAutoSuspendAfterSecs(value int) *WarehouseSpecApplyConfiguration {
	b.AutoSuspendAfterSecs = &value
	return b
}

// WithQueryImage sets the QueryImage field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the QueryImage field is set to the value of the last call.
func (b *WarehouseSpecApplyConfiguration) WithQueryImage(value string) *WarehouseSpecApplyConfiguration {
	b.QueryImage = &value
	return b
}

// WithTenant sets the Tenant field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Tenant field is set to the value of the last call.
func (b *WarehouseSpecApplyConfiguration) WithTenant(value v1.LocalObjectReference) *WarehouseSpecApplyConfiguration {
	b.Tenant = &value
	return b
}

// WithCache sets the Cache field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Cache field is set to the value of the last call.
func (b *WarehouseSpecApplyConfiguration) WithCache(value *DiskCacheSpecApplyConfiguration) *WarehouseSpecApplyConfiguration {
	b.Cache = value
	return b
}

// WithLog sets the Log field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Log field is set to the value of the last call.
func (b *WarehouseSpecApplyConfiguration) WithLog(value *LogSpecApplyConfiguration) *WarehouseSpecApplyConfiguration {
	b.Log = value
	return b
}

// WithPodLabels puts the entries into the PodLabels field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the PodLabels field,
// overwriting an existing map entries in PodLabels field with the same key.
func (b *WarehouseSpecApplyConfiguration) WithPodLabels(entries map[string]string) *WarehouseSpecApplyConfiguration {
	if b.PodLabels == nil && len(entries) > 0 {
		b.PodLabels = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.PodLabels[k] = v
	}
	return b
}

// WithPodResource sets the PodResource field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PodResource field is set to the value of the last call.
func (b *WarehouseSpecApplyConfiguration) WithPodResource(value v1.ResourceRequirements) *WarehouseSpecApplyConfiguration {
	b.PodResource = &value
	return b
}

// WithPodTolerations adds the given value to the PodTolerations field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the PodTolerations field.
func (b *WarehouseSpecApplyConfiguration) WithPodTolerations(values ...v1.Toleration) *WarehouseSpecApplyConfiguration {
	for i := range values {
		b.PodTolerations = append(b.PodTolerations, values[i])
	}
	return b
}

// WithNodeSelector puts the entries into the NodeSelector field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the NodeSelector field,
// overwriting an existing map entries in NodeSelector field with the same key.
func (b *WarehouseSpecApplyConfiguration) WithNodeSelector(entries map[string]string) *WarehouseSpecApplyConfiguration {
	if b.NodeSelector == nil && len(entries) > 0 {
		b.NodeSelector = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.NodeSelector[k] = v
	}
	return b
}

// WithService sets the Service field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Service field is set to the value of the last call.
func (b *WarehouseSpecApplyConfiguration) WithService(value *WarehouseServiceSpecApplyConfiguration) *WarehouseSpecApplyConfiguration {
	b.Service = value
	return b
}

// WithIngress sets the Ingress field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Ingress field is set to the value of the last call.
func (b *WarehouseSpecApplyConfiguration) WithIngress(value *WarehouseIngressSpecApplyConfiguration) *WarehouseSpecApplyConfiguration {
	b.Ingress = value
	return b
}

// WithSettings puts the entries into the Settings field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Settings field,
// overwriting an existing map entries in Settings field with the same key.
func (b *WarehouseSpecApplyConfiguration) WithSettings(entries map[string]string) *WarehouseSpecApplyConfiguration {
	if b.Settings == nil && len(entries) > 0 {
		b.Settings = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Settings[k] = v
	}
	return b
}
