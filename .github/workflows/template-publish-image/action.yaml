# Composite action to publish Databend Operator images.
name: Build And Publish Container Images
description: Build Multiplatform Supporting Container Images

inputs:
  image:
    required: true
    description: image tag
  dockerfile:
    required: true
    description: path for Dockerfile
  platforms:
    required: true
    description: e.g, linux/amd64
  context:
    required: false
    default: .
    description: e.g, examples/xgboost/xgboost-dist
  push:
    required: true
    description: whether to push container images or not
  github_token:
    required: true
    description: GitHub token used for authentication with GHCR
  build_args:
    required: false
    default: ''
    description: Additional build arguments for Docker build

runs:
  using: composite
  steps:
    # This step is a Workaround to avoid the "No space left on device" error.
    # ref: https://github.com/actions/runner-images/issues/2840
    - name: Remove unnecessary files
      shell: bash
      run: |
        echo "Disk usage before cleanup:"
        df -hT

        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf /usr/local/share/boost
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /usr/local/share/powershell
        sudo rm -rf /usr/share/swift

        echo "Disk usage after cleanup:"
        df -hT

    - name: Prune docker images
      shell: bash
      run: |
        docker image prune -a -f
        docker system df
        df -hT

    - name: Move docker data directory
      shell: bash
      run: |
        echo "Stopping docker service ..."
        sudo systemctl stop docker
        DOCKER_DEFAULT_ROOT_DIR=/var/lib/docker
        DOCKER_ROOT_DIR=/mnt/docker
        echo "Moving ${DOCKER_DEFAULT_ROOT_DIR} -> ${DOCKER_ROOT_DIR}"
        sudo mv ${DOCKER_DEFAULT_ROOT_DIR} ${DOCKER_ROOT_DIR}
        echo "Creating symlink ${DOCKER_DEFAULT_ROOT_DIR} -> ${DOCKER_ROOT_DIR}"
        sudo ln -s ${DOCKER_ROOT_DIR} ${DOCKER_DEFAULT_ROOT_DIR}
        echo "$(sudo ls -l ${DOCKER_DEFAULT_ROOT_DIR})"
        echo "Starting docker service ..."
        sudo systemctl daemon-reload
        sudo systemctl start docker
        echo "Docker service status:"
        sudo systemctl --no-pager -l -o short status docker

    - name: Configure Go Build Cache
      shell: bash
      run: |
        export GOPATH=/tmp/go
        export GOCACHE=/tmp/go-cache
        export GOMODCACHE=/tmp/go-mod-cache
        mkdir -p $GOPATH $GOCACHE $GOMODCACHE
        echo "GOPATH=$GOPATH" >> $GITHUB_ENV
        echo "GOCACHE=$GOCACHE" >> $GITHUB_ENV
        echo "GOMODCACHE=$GOMODCACHE" >> $GITHUB_ENV
        CORES=$(nproc)
        GOMAXPROCS=$((CORES-1))
        echo "GOMAXPROCS=$GOMAXPROCS" >> $GITHUB_ENV

    - name: Setup QEMU
      uses: docker/setup-qemu-action@v3
      with:
        platforms: amd64,arm64

    - name: Set Up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        buildkitd-flags: --debug

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ inputs.github_token }}

    - name: Extract GitHub Repository Information
      id: repo-info
      shell: bash
      run: |
        REPO_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')
        echo "repo_name=${REPO_NAME}" >> $GITHUB_OUTPUT

    - name: Prepare Build Args
      id: build-args
      shell: bash
      run: |
        BUILD_ARGS="GOPROXY=https://proxy.golang.org,direct"
        BUILD_ARGS="${BUILD_ARGS} GOMAXPROCS=${GOMAXPROCS}"
        
        if [[ -n "${{ inputs.build_args }}" ]]; then
          BUILD_ARGS="${BUILD_ARGS} ${{ inputs.build_args }}"
        fi
        
        echo "args=${BUILD_ARGS}" >> $GITHUB_OUTPUT
        echo "Prepared build args: ${BUILD_ARGS}"

    - name: Add Docker Tags
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ steps.repo-info.outputs.repo_name }}/${{ inputs.image }}
        tags: |
          type=raw,value=latest
          type=sha

    - name: Build and Push
      uses: docker/build-push-action@v5
      with:
        platforms: ${{ inputs.platforms }}
        context: ${{ inputs.context }}
        file: ${{ inputs.dockerfile }}
        push: ${{ inputs.push }}
        tags: ${{ steps.meta.outputs.tags }}
        cache-from: type=gha,scope=${{ inputs.image }}-${{ github.workflow }}
        cache-to: type=gha,mode=max,scope=${{ inputs.image }}-${{ github.workflow }},ignore-error=true
        build-args: ${{ steps.build-args.outputs.args }}
        pull: true
        outputs: type=registry,compression=zstd,compression-level=3,force-compression=true